import { useState, useEffect, useCallback, useRef } from 'react';
import type { Agent, ChatMessage } from '../types';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏ –µ–Ω—É–º—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
import {
  EConnectionType,
  EMessageToServer,
  EMessageFromUI,
  EMessageFromServer,
} from '../server/message.enum';

import type { IMessageFromUI, IMessageFromServer } from '../types/messages';

export interface UseWebSocketReturn {
  agents: Agent[];
  chatMessages: ChatMessage[];
  wsConnected: boolean;
  loading: boolean;
  sendMessage: (message: IMessageFromUI) => void;
  sendToRooCode: (agentId: string, message: string) => Promise<void>;
  setChatMessages: React.Dispatch<React.SetStateAction<ChatMessage[]>>;
  reconnect: () => void;
  connectionAttempts: number;
}

export function useWebSocket(): UseWebSocketReturn {
  const [agents, setAgents] = useState<Agent[]>([]);
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>(() => {
    try {
      const saved = localStorage.getItem('agent-chat-messages');
      return saved ? JSON.parse(saved) : [];
    } catch (error) {
      console.warn('Failed to load chat messages from localStorage:', error);
      return [];
    }
  });
  const [loading, setLoading] = useState(true);
  const [wsConnected, setWsConnected] = useState(false);
  const [ws, setWs] = useState<WebSocket | null>(null);
  const [isConnecting, setIsConnecting] = useState(false);
  const [loadingMessageId, setLoadingMessageId] = useState<string | null>(null);

  const uiClientId = useRef(`ui-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`);
  const hasConnectedRef = useRef(false);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const pingIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const reconnectAttemptsRef = useRef(0);
  const maxReconnectAttempts = 10;

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ localStorage
  useEffect(() => {
    try {
      localStorage.setItem('agent-chat-messages', JSON.stringify(chatMessages));
    } catch (error) {
      console.warn('Failed to save chat messages to localStorage:', error);
    }
  }, [chatMessages]);

  const connectWebSocket = useCallback(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (reconnectAttemptsRef.current >= maxReconnectAttempts) {
      console.error('üö´ Max reconnection attempts reached');
      setLoading(false);
      return;
    }

    if (isConnecting) {
      console.log('üîí Already connecting...');
      return;
    }

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (ws && ws.readyState !== WebSocket.CLOSED) {
      console.log('üîå Closing existing connection');
      ws.close(1000, 'Reconnecting');
      setWs(null);
    }

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }
    if (pingIntervalRef.current) {
      clearInterval(pingIntervalRef.current);
      pingIntervalRef.current = null;
    }

    setIsConnecting(true);
    reconnectAttemptsRef.current += 1;

    console.log(`üîó Connecting to WebSocket (attempt ${reconnectAttemptsRef.current}/${maxReconnectAttempts})`);
    
    const websocket = new WebSocket('ws://localhost:8080');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const connectionTimeout = setTimeout(() => {
      if (websocket.readyState === WebSocket.CONNECTING) {
        console.log('‚è∞ Connection timeout');
        websocket.close();
      }
    }, 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

    websocket.onopen = () => {
      clearTimeout(connectionTimeout);
      console.log('üîó WebSocket connection opened');
      
      // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      reconnectAttemptsRef.current = 0;
      hasConnectedRef.current = true;
      setWsConnected(true);
      setLoading(false);
      setIsConnecting(false);
      setWs(websocket);

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è –∫–∞–∫ UI –∫–ª–∏–µ–Ω—Ç
      const identifyMessage: IMessageFromUI = {
        messageType: EMessageToServer.Register,
        connectionType: EConnectionType.UI,
        details: {
          uiClientId: uiClientId.current,
        },
      };
      
      try {
        websocket.send(JSON.stringify(identifyMessage));
      } catch (error) {
        console.error('‚ùå Failed to send registration message:', error);
      }

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º heartbeat - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      pingIntervalRef.current = setInterval(() => {
        if (websocket.readyState === WebSocket.OPEN) {
          try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä—É
            const pingMessage: IMessageFromUI = {
              messageType: EMessageToServer.Register, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
              connectionType: EConnectionType.UI,
              details: { ping: true, timestamp: Date.now() },
            };
            websocket.send(JSON.stringify(pingMessage));
          } catch (error) {
            console.warn('üíì Heartbeat failed, reconnecting...', error);
            connectWebSocket();
          }
        } else {
          console.log('üîå WebSocket not open during heartbeat, reconnecting...');
          connectWebSocket();
        }
      }, 30000); // heartbeat –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    };

    websocket.onmessage = (event) => {
      try {
        const message = JSON.parse(event.data) as IMessageFromServer;
        console.log('üîî Received WebSocket message:', message);

        switch (message.messageType) {
          case EMessageFromServer.AgentList:
            const agentList = message.details?.agents || [];
            const validAgents = agentList.filter((agent: any) => agent && agent.id);
            setAgents(validAgents);
            break;

          case EMessageFromServer.AgentUpdate:
            const updatedAgentList = message.details?.agents || [];
            const validUpdatedAgents = updatedAgentList.filter((agent: any) => agent && agent.id);
            setAgents(validUpdatedAgents);
            break;

          case EMessageFromServer.Registered:
            console.log('UI client registration confirmed');
            const messageToSend: IMessageFromUI = {
              messageType: EMessageFromUI.GetAgents,
              connectionType: EConnectionType.UI,
            };
            websocket.send(JSON.stringify(messageToSend));
            break;

          case EMessageFromServer.RooCodeResponse:
            console.log('ü§ñ Received RooCode response:', message.details);
            
            if (loadingMessageId) {
              setChatMessages((prev) => prev.filter(msg => msg.id !== loadingMessageId));
              setLoadingMessageId(null);
            }

            const messageContent = message.details?.response || 'No response';
            const messageTimestamp = message.timestamp || Date.now();
            const messageId = `agent-${messageTimestamp}-${messageContent.substring(0, 50).replace(/\s+/g, '-')}`;

            setChatMessages((prev) => {
              const messageExists = prev.some(msg => 
                msg.type === 'agent' &&
                msg.content === messageContent && 
                Math.abs(msg.timestamp - messageTimestamp) < 1000
              );
              
              if (messageExists) {
                return prev;
              }

              const agentMessage: ChatMessage = {
                id: messageId,
                agentId: message.details?.agentId || 'unknown',
                type: 'agent',
                content: messageContent,
                timestamp: messageTimestamp,
                status: 'delivered',
              };
              
              return [...prev, agentMessage];
            });
            break;
        }
      } catch (error) {
        console.error('Failed to parse WebSocket message:', error);
      }
    };

    websocket.onerror = (error) => {
      clearTimeout(connectionTimeout);
      console.error('‚ùå WebSocket error:', error);
      setWsConnected(false);
      setIsConnecting(false);
      setWs(null);
      
      // –û—á–∏—â–∞–µ–º ping –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (pingIntervalRef.current) {
        clearInterval(pingIntervalRef.current);
        pingIntervalRef.current = null;
      }
    };

    websocket.onclose = (event) => {
      clearTimeout(connectionTimeout);
      const { code, reason } = event;
      
      console.log(`üîå WebSocket connection closed:`, {
        code,
        reason,
        wasClean: event.wasClean,
        attempt: reconnectAttemptsRef.current
      });
      
      setWsConnected(false);
      setIsConnecting(false);
      setWs(null);
      hasConnectedRef.current = false;
      
      // –û—á–∏—â–∞–µ–º ping –∏–Ω—Ç–µ—Ä–≤–∞–ª
      if (pingIntervalRef.current) {
        clearInterval(pingIntervalRef.current);
        pingIntervalRef.current = null;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è
      const shouldReconnect = 
        code !== 1000 && // –Ω–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        code !== 1001 && // not going away 
        reconnectAttemptsRef.current < maxReconnectAttempts;
      
      if (shouldReconnect) {
        // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const delay = Math.min(1000 * Math.pow(2, reconnectAttemptsRef.current - 1), 30000);
        
        console.log(`üîÑ Scheduling reconnection in ${delay}ms...`);
        
        reconnectTimeoutRef.current = setTimeout(() => {
          if (!wsConnected && !isConnecting) {
            connectWebSocket();
          }
        }, delay);
      } else {
        console.log('üö´ Not reconnecting:', 
          code === 1000 ? 'Normal closure' : 
          code === 1001 ? 'Going away' : 
          'Max attempts reached'
        );
        setLoading(false);
      }
    };

    setWs(websocket);
  }, []); // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–π

  useEffect(() => {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    if (!hasConnectedRef.current && !isConnecting) {
      connectWebSocket();
    }

    // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      console.log('üßπ Cleaning up WebSocket connection');
      
      setIsConnecting(false);
      hasConnectedRef.current = false;
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
        reconnectTimeoutRef.current = null;
      }
      
      if (pingIntervalRef.current) {
        clearInterval(pingIntervalRef.current);
        pingIntervalRef.current = null;
      }
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      if (ws && ws.readyState !== WebSocket.CLOSED) {
        ws.close(1000, 'Component unmounting');
        setWs(null);
      }
      
      setWsConnected(false);
      setLoading(false);
    };
  }, []); // –ü—É—Å—Ç—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏/—Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  const sendMessage = useCallback((message: IMessageFromUI) => {
    if (ws && ws.readyState === WebSocket.OPEN) {
      try {
        ws.send(JSON.stringify(message));
      } catch (error) {
        console.error('‚ùå Failed to send message:', error);
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if (!isConnecting) {
          connectWebSocket();
        }
      }
    } else {
      console.warn('‚ö†Ô∏è WebSocket not connected, current state:', 
        ws ? 
          ws.readyState === WebSocket.CONNECTING ? 'CONNECTING' :
          ws.readyState === WebSocket.CLOSING ? 'CLOSING' :
          ws.readyState === WebSocket.CLOSED ? 'CLOSED' : 'UNKNOWN'
        : 'NULL'
      );
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      if (!isConnecting && !wsConnected) {
        console.log('üîÑ Auto-reconnecting...');
        connectWebSocket();
      }
    }
  }, [ws, isConnecting, wsConnected, connectWebSocket]);

  const sendToRooCode = useCallback(async (agentId: string, message: string) => {
    const userMessageId = `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    
    const userMessage: ChatMessage = {
      id: userMessageId,
      agentId,
      type: 'user',
      content: message,
      timestamp: Date.now(),
      status: 'sent',
    };

    setChatMessages((prev) => [...prev, userMessage]);

    const loadingMessageId = `loading-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    const loadingMessage: ChatMessage = {
      id: loadingMessageId,
      agentId,
      type: 'loading',
      content: '',
      timestamp: Date.now(),
      status: 'loading',
    };

    setChatMessages((prev) => [...prev, loadingMessage]);
    setLoadingMessageId(loadingMessageId);

    const messageToSend: IMessageFromUI = {
      messageType: EMessageFromUI.SendToRooCode,
      connectionType: EConnectionType.UI,
      details: {
        agentId,
        message,
      },
    };

    sendMessage(messageToSend);
  }, [sendMessage]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const reconnect = useCallback(() => {
    console.log('üîÑ Manual reconnection requested');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
    reconnectAttemptsRef.current = 0;
    hasConnectedRef.current = false;
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (ws) {
      ws.close(1000, 'Manual reconnection');
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }
    
    if (pingIntervalRef.current) {
      clearInterval(pingIntervalRef.current);
      pingIntervalRef.current = null;
    }
    
    setWsConnected(false);
    setIsConnecting(false);
    setLoading(true);
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∑–∞–Ω–æ–≤–æ
    setTimeout(() => connectWebSocket(), 100);
  }, [ws, connectWebSocket]);

  return {
    agents,
    chatMessages,
    wsConnected,
    loading,
    sendMessage,
    sendToRooCode,
    setChatMessages,
    reconnect,
    connectionAttempts: reconnectAttemptsRef.current,
  };
}
