import React, { createContext, useContext, useCallback, useRef, useEffect, useState } from 'react';
import { ConnectionSource, Message, EMessageFromServer, EMessageFromUI, ESystemMessage, EMessageFromAgent} from '../../../core/types'
import { useAddAgents, useUpdateAgents } from '../queries/useAgents';
import { getMessagesByTaskId, useAddMessage, useAddMessages } from '../queries/useMessages';
import { getTasksByAgentId, useAddTask, useAddTasks, useUpdateTask } from '../queries/useTasks';
import { useAddProfiles, useUpdateActiveProfile } from '../queries/useProfiles';
import { useQueryClient } from '@tanstack/react-query';
import { RooCodeEventName } from '@roo-code/types';

export interface WebSocketContextType {
  isConnected: boolean;
  isConnecting: boolean;
  connectionAttempts: number;
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  sendMessage: (message: Message) => void;
  reconnect: () => void;

  getAgents: () => void;
  getActiveTaskIds: (agentId: string) => void;
  getProfiles: (agentId: string) => void;
  getActiveProfile: (agentId: string) => void;
  startNewTask: (agentId: string, taskId: string, message: string, profile?: string | null) => void;
  sendMessageToTask: (agentId: string, taskId: string, message: string) => void;
  
  onConnectionStateChange: (handler: (isConnected: boolean) => void) => () => void;
}

const WebSocketContext = createContext<WebSocketContextType | null>(null);

interface WebSocketProviderProps extends React.PropsWithChildren {
  url?: string;
  reconnectInterval?: number;
  maxReconnectAttempts?: number;
  heartbeatInterval?: number;
}

export const WebSocketProvider: React.FC<WebSocketProviderProps> = ({
  children,
  url = 'ws://localhost:8080',
  reconnectInterval = 1000,
  maxReconnectAttempts = 10,
  heartbeatInterval = 30000,
}) => {
  const [isConnected, setIsConnected] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);
  const [connectionAttempts, setConnectionAttempts] = useState(0);

  const queryClient = useQueryClient();

  const addAgentsMutation = useAddAgents();
  const updateAgentsMutation = useUpdateAgents();
  const addMessageMutation = useAddMessage();
  const addMessagesMutation = useAddMessages();
  const updateTaskMutation = useUpdateTask();
  const addTasksMutation = useAddTasks();
  const addProfilesMutation = useAddProfiles();
  const updateActiveProfileMutation = useUpdateActiveProfile();
  
  const wsRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const heartbeatIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const uiClientIdRef = useRef(`ui-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`);
  
  const connectionHandlersRef = useRef<Set<(isConnected: boolean) => void>>(new Set());
  
  const clearTimers = useCallback(() => {
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }
    if (heartbeatIntervalRef.current) {
      clearInterval(heartbeatIntervalRef.current);
      heartbeatIntervalRef.current = null;
    }
  }, []);

  const notifyConnectionHandlers = useCallback((connected: boolean) => {
    connectionHandlersRef.current.forEach(handler => {
      try {
        handler(connected);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      }
    });
  }, []);

  const handleServerMessage = useCallback((message: Message) => {
    switch (message.type) {
      case EMessageFromServer.AgentList:
        addAgentsMutation.mutate(message.data?.agents || []);
        break;
      case EMessageFromServer.AgentUpdate:
        updateAgentsMutation.mutate(message.data?.agents || []);
        break;
    }
  }, []);

  const handleAgentMessage = useCallback((message: Message) => {
    switch (message.type) {
      case EMessageFromAgent.AgentResponse:
        switch (message.event?.eventName) {
          case RooCodeEventName.TaskCreated:
            getActiveTaskIds(message.agent?.id || "");
            break;
          case RooCodeEventName.Message:

            console.log('isEmpty',!message.event?.message.text, message.event?.message.text, message.event, )
            const isEmpty = !message.event?.message.text
            const isPartial = message.event?.message.partial
            if (isEmpty || isPartial) {
              break;
            }
            const isUser = message.event?.message.say === 'user_feedback'
            addMessageMutation.mutate({
              taskId: message.event!.taskId!.toString(),
              message: {
                type: isUser ? 'user' : 'agent',
                content: message.event?.message?.text
              }
            });
            break;
        }
        
        break;
      case EMessageFromAgent.ActiveTaskIdsResponse:
        addTasksMutation.mutate({
          agentId: message.agent?.id || "",
          tasks: message.data?.taskIds.map((taskId: string) => ({
            id: taskId,
            agentId: message.agent?.id || "",
          })) || []
        });
        break;
      case EMessageFromAgent.ProfilesResponse:
        addProfilesMutation.mutate(message.data?.profiles || []);
        break;
      case EMessageFromAgent.ActiveProfileResponse:
        updateActiveProfileMutation.mutate(message.data?.activeProfile);
        break;
      case EMessageFromAgent.TaskStartedResponse:
        console.log('TaskCreatedResponse', message)
        if (message.data?.clientTaskId && message.data?.agentTaskId) {
          const previousMessages = queryClient.getQueryData(getMessagesByTaskId(message.data?.clientTaskId).queryKey);

          addMessagesMutation.mutate({
            taskId: message.data?.agentTaskId || "",
            messages: previousMessages || []
          });

          updateTaskMutation.mutate({
            agentId: message.agent?.id || "",
            taskId: message.data?.clientTaskId || "",
            task: {
              id: message.data?.agentTaskId || "",
              agentId: message.agent?.id || "",
              isNewTask: false,
            }
          });
        } else {
          addTasksMutation.mutate({
            agentId: message.agent?.id || "",
            tasks: [{
              id: message.data?.agentTaskId || "",
              agentId: message.agent?.id || "",
            }]
          });
        }
        break;

    }
  }, []);


  const connect = useCallback(() => {
    if (connectionAttempts >= maxReconnectAttempts) {
      console.error('üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      setIsConnecting(false);
      return;
    }

    if (isConnecting) {
      console.log('üîí –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...');
      return;
    }

    if (wsRef.current && wsRef.current.readyState !== WebSocket.CLOSED) {
      wsRef.current.close(1000, '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    }

    clearTimers();
    setIsConnecting(true);
    setConnectionAttempts(prev => {
      const newAttempts = prev + 1;
      console.log(`üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket (–ø–æ–ø—ã—Ç–∫–∞ ${newAttempts}/${maxReconnectAttempts})`);
      return newAttempts;
    });

    const websocket = new WebSocket(url);

    websocket.onopen = () => {
      console.log('üîó WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
      
      wsRef.current = websocket;
      setIsConnected(true);
      setIsConnecting(false);
      setConnectionAttempts(0);
      notifyConnectionHandlers(true);

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è –∫–∞–∫ UI –∫–ª–∏–µ–Ω—Ç
      const registerMessage: Message = {
        type: ESystemMessage.Register,
        source: ConnectionSource.UI,
        data: {
          uiClientId: uiClientIdRef.current,
        },
      };

      try {
        websocket.send(JSON.stringify(registerMessage));
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      }

      heartbeatIntervalRef.current = setInterval(() => {
        if (websocket.readyState === WebSocket.OPEN) {
          try {
            const pingMessage: Message = {
              type: ESystemMessage.Ping,
              source: ConnectionSource.UI,
              data: { ping: true, timestamp: Date.now() },
            };
            websocket.send(JSON.stringify(pingMessage));
          } catch (error) {
            console.warn('üíì –û—à–∏–±–∫–∞ heartbeat, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...', error);
            connect();
          }
        } else {
          console.log('üîå WebSocket –Ω–µ –æ—Ç–∫—Ä—ã—Ç –≤–æ –≤—Ä–µ–º—è heartbeat, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
          connect();
        }
      }, heartbeatInterval);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    websocket.onmessage = (event) => {
      try {
        const message = JSON.parse(event.data) as Message;
        console.log('üîî –ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);

        switch (message.source) {
          case ConnectionSource.Server:
            handleServerMessage(message);
            break;
          case ConnectionSource.Agent:
            handleAgentMessage(message);
            break;
        }

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    websocket.onerror = (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
      setIsConnected(false);
      setIsConnecting(false);
      notifyConnectionHandlers(false);
      clearTimers();
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    websocket.onclose = (event) => {
      const { code, reason } = event;
      console.log(`üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:`, {
        code,
        reason,
        wasClean: event.wasClean,
        attempt: connectionAttempts
      });

      setIsConnected(false);
      setIsConnecting(false);
      wsRef.current = null;
      notifyConnectionHandlers(false);
      clearTimers();

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      const shouldReconnect = 
        code !== 1000 && // –Ω–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        code !== 1001 && // —É—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        connectionAttempts < maxReconnectAttempts;

      if (shouldReconnect) {
        const delay = Math.min(reconnectInterval * Math.pow(2, connectionAttempts), 30000);
        console.log(`üîÑ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay}–º—Å...`);
        
        reconnectTimeoutRef.current = setTimeout(() => {
          if (!isConnected && !isConnecting) {
            connect();
          }
        }, delay);
      } else {
        console.log('üö´ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è:', 
          code === 1000 ? '–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ' : 
          code === 1001 ? '–£—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' : 
          '–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫'
        );
      }
    };
  }, []);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = useCallback((message: Message) => {
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      try {
        wsRef.current.send(JSON.stringify(message));
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        if (!isConnecting) {
          connect();
        }
      }
    } else {
      console.warn('‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', 
        wsRef.current ? 
          wsRef.current.readyState === WebSocket.CONNECTING ? '–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï' :
          wsRef.current.readyState === WebSocket.CLOSING ? '–ó–ê–ö–†–´–¢–ò–ï' :
          wsRef.current.readyState === WebSocket.CLOSED ? '–ó–ê–ö–†–´–¢–û' : '–ù–ï–ò–ó–í–ï–°–¢–ù–û'
        : 'NULL'
      );
      
      if (!isConnecting && !isConnected) {
        console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
        connect();
      }
    }
  }, [isConnecting, isConnected, connect]);

  // –†—É—á–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  const reconnect = useCallback(() => {
    console.log('üîÑ –ó–∞–ø—Ä–æ—à–µ–Ω–æ —Ä—É—á–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    
    setConnectionAttempts(0);
    
    if (wsRef.current) {
      wsRef.current.close(1000, '–†—É—á–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    }
    
    clearTimers();
    setIsConnected(false);
    setIsConnecting(false);
    
    setTimeout(() => connect(), 100);
  }, [connect, clearTimers]);

  const getActiveTaskIds = useCallback(async (agentId: string) => {
    const message: Message = {
      type: EMessageFromUI.GetActiveTaskIds,
      source: ConnectionSource.UI,
      agent: { id: agentId },
    };
    
    sendMessage(message);
  }, [sendMessage]);

  const getAgents = useCallback(async () => {
    const message: Message = {
      type: EMessageFromUI.GetAgents,
      source: ConnectionSource.UI,
    };
    
    sendMessage(message);
  }, [sendMessage]);


  const getProfiles = useCallback(async (agentId: string) => {
    const message: Message = {
      type: EMessageFromUI.GetProfiles,
      source: ConnectionSource.UI,
      agent: { id: agentId },
    };
    
    sendMessage(message);
  }, [sendMessage]);

  const getActiveProfile = useCallback(async (agentId: string) => {
    const message: Message = {
      type: EMessageFromUI.GetActiveProfile,
      source: ConnectionSource.UI,
      agent: { id: agentId },
    };
    
    sendMessage(message);
  }, [sendMessage]);

  const startNewTask = useCallback(async (agentId: string, taskId: string, message: string, profile?: string | null) => {
    const wsMessage: Message = {
      type: EMessageFromUI.CreateTask,
      source: ConnectionSource.UI,
      agent: { id: agentId },
      data: { 
        taskId, 
        message, 
        ...(profile ? { profile } : {})
      },
    };
    
    sendMessage(wsMessage);
  }, [sendMessage]);

  const sendMessageToTask = useCallback(async (agentId: string, taskId: string, message: string) => {
    const wsMessage: Message = {
      type: EMessageFromUI.SendMessageToTask,
      source: ConnectionSource.UI,
      agent: { id: agentId },
      data: { taskId, message },
    };
    
    sendMessage(wsMessage);
  }, [sendMessage]);

  const onConnectionStateChange = useCallback((handler: (isConnected: boolean) => void) => {
    connectionHandlersRef.current.add(handler);
    return () => {
      connectionHandlersRef.current.delete(handler);
    };
  }, []);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    connect();
    
    return () => {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      clearTimers();
      
      if (wsRef.current && wsRef.current.readyState !== WebSocket.CLOSED) {
        wsRef.current.close(1000, 'Component unmounting');
      }
    };
  }, []);

  // –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const contextValue: WebSocketContextType = {
    isConnected,
    isConnecting,
    connectionAttempts,
    sendMessage,
    reconnect,
    getAgents,
    getActiveTaskIds,
    getProfiles,
    getActiveProfile,
    startNewTask,
    sendMessageToTask,
    onConnectionStateChange,
  };

  return React.createElement(
    WebSocketContext.Provider,
    { value: contextValue },
    children
  );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è WebSocket –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useWebSocketConnection = (): WebSocketContextType => {
  const context = useContext(WebSocketContext);
  if (!context) {
    throw new Error('useWebSocketConnection –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ WebSocketProvider');
  }
  return context;
};

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default WebSocketProvider;
